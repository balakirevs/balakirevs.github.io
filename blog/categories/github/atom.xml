<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: github | Tech Blog]]></title>
  <link href="http://balakiriev.com/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://balakiriev.com/"/>
  <updated>2013-12-30T16:53:21+01:00</updated>
  <id>http://balakiriev.com/</id>
  <author>
    <name><![CDATA[Aleksandr Balakiriev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Globalize your .gitignore]]></title>
    <link href="http://balakiriev.com/blog/2013/12/29/globalize-your-gitignore/"/>
    <updated>2013-12-29T15:42:00+01:00</updated>
    <id>http://balakiriev.com/blog/2013/12/29/globalize-your-gitignore</id>
    <content type="html"><![CDATA[<p>When I was new to git, I would always jam the same old stuff in each project&rsquo;s .gitignore, like:</p>

<p>.gitignore</p>

<p>.DS_Store</p>

<h1>other os x-y stuff</h1>

<p>node_modules
bower_components
node_modules and bower_components make sense to be included in a project&rsquo;s .gitignore. Whatever developer may check out and contribute to your project will end up with those directories created, and you may or may not want them hidden from your repository.</p>

<!-- more -->


<p>Other stuff, however, may be unique to your development environment. Things such as hidden OS files, IDE project files, etc. Is every contributor to your project meant to update .gitignore to consider their environment? This problem is neverending.</p>

<p>Then, I remembered something very important. git&rsquo;s smarter than I am. They&rsquo;ve totally figured this out.</p>

<p>Introducing&hellip;</p>

<p>~/.gitignore_global</p>

<h1>Compiled source</h1>

<h6>#</h6>

<p><em>.com
</em>.class
<em>.dll
</em>.exe
<em>.o
</em>.so</p>

<h1>Packages</h1>

<h6>#</h6>

<h1>it&rsquo;s better to unpack these files and commit the raw source</h1>

<h1>git has its own built in compression methods</h1>

<p><em>.7z
</em>.dmg
<em>.gz
</em>.iso
<em>.jar
</em>.rar
<em>.tar
</em>.zip</p>

<h1>Logs and databases</h1>

<h6>#</h6>

<p><em>.log
</em>.sql
*.sqlite</p>

<h1>OS generated files</h1>

<h6>#</h6>

<p>.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
Create that file, then run:</p>

<p>$ git config &mdash;global core.excludesfile ~/.gitignore_global
Every git project, system-wide, will now respect this list of ignored file patterns, saving you the trouble!</p>

<p>The technique above is detailed in GitHub&rsquo;s Help Pages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Github Blog Using Octopress]]></title>
    <link href="http://balakiriev.com/blog/2013/12/29/creating-a-github-blog-using-octopress/"/>
    <updated>2013-12-29T15:21:00+01:00</updated>
    <id>http://balakiriev.com/blog/2013/12/29/creating-a-github-blog-using-octopress</id>
    <content type="html"><![CDATA[<p>Warning This article assumes you already installed RVM and Ruby.</p>

<p>Quick Summary for creating and deploying a post in Octopress</p>

<p>$ rake new_post[&ldquo;New Post&rdquo;]
$ rake generate
$ git add .
$ git commit -am &ldquo;Some comment here.&rdquo;
$ git push origin source
$ rake deploy
Installation Process of Octopress</p>

<!-- more -->


<p>Octopress is a framework designed for Jekyll to build a static website. It’s very easy to setup a blog with Octopress. Post are edited using Markdown. Yes, you need to have a Github account at Github.com.</p>

<p>Go to the terminal and clone the Octopress repo:</p>

<p>git clone git://github.com/imathis/octopress.git octopress</p>

<p>cd octopress
Check the version of Ruby is 1.9.2. This version is required.</p>

<p>ruby &mdash;version</p>

<p>bundle install
This command installs Octopress</p>

<p>rake install
Deploying to Github</p>

<p>Create a new Github repository. If you are creating a personal blog create a repo called:</p>

<p>username.github.com
After creating the repo, run the following command.</p>

<p>$rake setup_github_pages
Which is supposed to:</p>

<p>init a git repo
rename the branch from master to source
add your repo to origin.
Running the previous command shows this:</p>

<p>Enter the read/write url for your repository
You have to enter it like this:</p>

<p>git@github.com:username/username.github.com.git
For me it didn’t rename the branch from master to source or add my remote repo. I did it manually (see below)</p>

<p>Add your remote repo</p>

<p>Check what remote repositories you have:</p>

<p>git remote -v
My output was:</p>

<p>octopress   git://github.com/imathis/octopress.git (fetch)
octopress   git://github.com/imathis/octopress.git (push)
To add your repo do:</p>

<p>git remote add origin git@github.com:username/username.github.com.git
Rename the branch from master to source</p>

<p>$git branch
* master
$git branch -m master source
$git branch
* source
Preview on development stage</p>

<p>$ rake preview
Then browse to:</p>

<p>localhost:4000
If you get this error:</p>

<p>Sorry, I cannot find /
Read this link: Deploying to a Subdirectory</p>

<p>First push to Github</p>

<p>$rake generate
$git add .
$git commit -am &ldquo;First deploy to github.&rdquo;
$git push origin source
$rake deploy
Create a new posting</p>

<p>$rake new_post[&ldquo;Creating a Github Blog Using Octopress&rdquo;]
Go to the app folder source/_posts to find the new posting</p>

<p>Edit the posting and then follow these steps</p>

<p>$rake generate
$git add .
$git commit -m &ldquo;Initial blog post.&rdquo;
$git push origin source
$rake deploy
Add a custom domain</p>

<p>Go to source folder and create 2 files :</p>

<p>(mate if you are using Textmate)</p>

<p>cd source
mate CNAME
mate .nojekyll
Open the CNAMe file and this line:</p>

<p>www.yourdomain.com
The NoJekyll file will make Octopress works in Github Pages.</p>

<p>Push again to github</p>

<p>rake generate
git add .
git add -am &lsquo;domain configuration&rsquo;
git push origin source
rake deploy
Github need time to read your CNAME and updating the sites.</p>
]]></content>
  </entry>
  
</feed>
