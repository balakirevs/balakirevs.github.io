<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tech Blog]]></title>
  <link href="http://balakiriev.me/atom.xml" rel="self"/>
  <link href="http://balakiriev.me/"/>
  <updated>2013-12-29T16:27:28+01:00</updated>
  <id>http://balakiriev.me/</id>
  <author>
    <name><![CDATA[Aleksander Balakiriev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creation of remote git branch]]></title>
    <link href="http://balakiriev.me/blog/2013/12/29/creation-of-remote-git-branch/"/>
    <updated>2013-12-29T16:17:00+01:00</updated>
    <id>http://balakiriev.me/blog/2013/12/29/creation-of-remote-git-branch</id>
    <content type="html"><![CDATA[<p>1056
down vote
accepted
First, you create your branch locally</p>

<p>git checkout -b your_branch
The remote branch is automatically created when you push it to the remote server. So when you feel for it, you can just do</p>

<p>git push &lt;remote-name> &lt;branch-name>
Your colleagues would then just pull that branch, and it&rsquo;s automatically created locally.</p>

<!-- more -->


<p>Note however that formally, the format is:</p>

<p>git push &lt;remote-name> &lt;local-branch-name>:&lt;remote-branch-name>
But when you omit one, it assumes both names are the same.</p>

<p>From a comment below:</p>

<p>You might want to use git push -u &lt;remote-name> &lt;branch-name> instead, so that a subsequent git pull will know what to do.</p>

<p>– Bart Schuller</p>

<p>The -u option sets-up a upstream branch:</p>

<p>For every branch that is up to date or successfully pushed, add upstream (tracking) reference, used by argument-less git-pull(1) and other commands.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Globalize your .gitignore]]></title>
    <link href="http://balakiriev.me/blog/2013/12/29/globalize-your-gitignore/"/>
    <updated>2013-12-29T15:42:00+01:00</updated>
    <id>http://balakiriev.me/blog/2013/12/29/globalize-your-gitignore</id>
    <content type="html"><![CDATA[<p>When I was new to git, I would always jam the same old stuff in each project&rsquo;s .gitignore, like:</p>

<p>.gitignore</p>

<p>.DS_Store</p>

<h1>other os x-y stuff</h1>

<p>node_modules
bower_components
node_modules and bower_components make sense to be included in a project&rsquo;s .gitignore. Whatever developer may check out and contribute to your project will end up with those directories created, and you may or may not want them hidden from your repository.</p>

<!-- more -->


<p>Other stuff, however, may be unique to your development environment. Things such as hidden OS files, IDE project files, etc. Is every contributor to your project meant to update .gitignore to consider their environment? This problem is neverending.</p>

<p>Then, I remembered something very important. git&rsquo;s smarter than I am. They&rsquo;ve totally figured this out.</p>

<p>Introducing&hellip;</p>

<p>~/.gitignore_global</p>

<h1>Compiled source</h1>

<h6>#</h6>

<p><em>.com
</em>.class
<em>.dll
</em>.exe
<em>.o
</em>.so</p>

<h1>Packages</h1>

<h6>#</h6>

<h1>it&rsquo;s better to unpack these files and commit the raw source</h1>

<h1>git has its own built in compression methods</h1>

<p><em>.7z
</em>.dmg
<em>.gz
</em>.iso
<em>.jar
</em>.rar
<em>.tar
</em>.zip</p>

<h1>Logs and databases</h1>

<h6>#</h6>

<p><em>.log
</em>.sql
*.sqlite</p>

<h1>OS generated files</h1>

<h6>#</h6>

<p>.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
Create that file, then run:</p>

<p>$ git config &mdash;global core.excludesfile ~/.gitignore_global
Every git project, system-wide, will now respect this list of ignored file patterns, saving you the trouble!</p>

<p>The technique above is detailed in GitHub&rsquo;s Help Pages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Github Blog Using Octopress]]></title>
    <link href="http://balakiriev.me/blog/2013/12/29/creating-a-github-blog-using-octopress/"/>
    <updated>2013-12-29T15:21:00+01:00</updated>
    <id>http://balakiriev.me/blog/2013/12/29/creating-a-github-blog-using-octopress</id>
    <content type="html"><![CDATA[<p>Warning This article assumes you already installed RVM and Ruby.</p>

<p>Quick Summary for creating and deploying a post in Octopress</p>

<p>$ rake new_post[&ldquo;New Post&rdquo;]
$ rake generate
$ git add .
$ git commit -am &ldquo;Some comment here.&rdquo;
$ git push origin source
$ rake deploy
Installation Process of Octopress</p>

<!-- more -->


<p>Octopress is a framework designed for Jekyll to build a static website. It’s very easy to setup a blog with Octopress. Post are edited using Markdown. Yes, you need to have a Github account at Github.com.</p>

<p>Go to the terminal and clone the Octopress repo:</p>

<p>git clone git://github.com/imathis/octopress.git octopress</p>

<p>cd octopress
Check the version of Ruby is 1.9.2. This version is required.</p>

<p>ruby &mdash;version</p>

<p>bundle install
This command installs Octopress</p>

<p>rake install
Deploying to Github</p>

<p>Create a new Github repository. If you are creating a personal blog create a repo called:</p>

<p>username.github.com
After creating the repo, run the following command.</p>

<p>$rake setup_github_pages
Which is supposed to:</p>

<p>init a git repo
rename the branch from master to source
add your repo to origin.
Running the previous command shows this:</p>

<p>Enter the read/write url for your repository
You have to enter it like this:</p>

<p>git@github.com:username/username.github.com.git
For me it didn’t rename the branch from master to source or add my remote repo. I did it manually (see below)</p>

<p>Add your remote repo</p>

<p>Check what remote repositories you have:</p>

<p>git remote -v
My output was:</p>

<p>octopress   git://github.com/imathis/octopress.git (fetch)
octopress   git://github.com/imathis/octopress.git (push)
To add your repo do:</p>

<p>git remote add origin git@github.com:username/username.github.com.git
Rename the branch from master to source</p>

<p>$git branch
* master
$git branch -m master source
$git branch
* source
Preview on development stage</p>

<p>$ rake preview
Then browse to:</p>

<p>localhost:4000
If you get this error:</p>

<p>Sorry, I cannot find /
Read this link: Deploying to a Subdirectory</p>

<p>First push to Github</p>

<p>$rake generate
$git add .
$git commit -am &ldquo;First deploy to github.&rdquo;
$git push origin source
$rake deploy
Create a new posting</p>

<p>$rake new_post[&ldquo;Creating a Github Blog Using Octopress&rdquo;]
Go to the app folder source/_posts to find the new posting</p>

<p>Edit the posting and then follow these steps</p>

<p>$rake generate
$git add .
$git commit -m &ldquo;Initial blog post.&rdquo;
$git push origin source
$rake deploy
Add a custom domain</p>

<p>Go to source folder and create 2 files :</p>

<p>(mate if you are using Textmate)</p>

<p>cd source
mate CNAME
mate .nojekyll
Open the CNAMe file and this line:</p>

<p>www.yourdomain.com
The NoJekyll file will make Octopress works in Github Pages.</p>

<p>Push again to github</p>

<p>rake generate
git add .
git add -am &lsquo;domain configuration&rsquo;
git push origin source
rake deploy
Github need time to read your CNAME and updating the sites.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Show generated SQL in Rails 3 console]]></title>
    <link href="http://balakiriev.me/blog/2013/10/05/show-generated-sql-in-rails-3-console/"/>
    <updated>2013-10-05T00:14:00+02:00</updated>
    <id>http://balakiriev.me/blog/2013/10/05/show-generated-sql-in-rails-3-console</id>
    <content type="html"><![CDATA[<p>Have you ever wanted to see the resulting SQL of a query in Rails console? Well, unfortunately there&rsquo;s not really an &lsquo;easy&rsquo; way to do this, other than hacking the console, so here we go.</p>

<!-- more -->


<p>Fire up your Rails console. I&rsquo;m using Rails 3, but this should would in &lt;3:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rails c
</span><span class='line'>Loading development environment <span class="o">(</span>Rails 3.0.7<span class="o">)</span>
</span><span class='line'>&gt;&gt; _
</span></code></pre></td></tr></table></div></figure>


<p>Cool, awesome, great. Now, we need to tell Rails console that we want to show what&rsquo;s being logged:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rails c
</span><span class='line'>Loading development environment <span class="o">(</span>Rails 3.0.7<span class="o">)</span>
</span><span class='line'>&gt;&gt; ActiveRecord::Base.logger <span class="o">=</span> Logger.new<span class="o">(</span>STDOUT<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are creating a new instance of the <code>ActiveRecord::Base#logger</code> class. Normally, you would specify this as a file (for example, if you were performing an AR operation that you wanted to log separately from Application logs):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;./logs/custom_log.log&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But in this case, we are simply &ldquo;writing&rdquo; to <code>STDOUT</code>. Now, when you run a query, you should see the supplemental query just as if you were viewing your development server logs!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thought Process]]></title>
    <link href="http://balakiriev.me/blog/2013/10/05/thought-process/"/>
    <updated>2013-10-05T00:13:00+02:00</updated>
    <id>http://balakiriev.me/blog/2013/10/05/thought-process</id>
    <content type="html"><![CDATA[<p>Today, I was about to Tweet something on Twitter. As I was looking down my activity feed, I thought to myself: &ldquo;what is a Tweet in the past?&rdquo;</p>

<!-- more -->


<p>Here&rsquo;s how my mind unfolded that question:</p>

<blockquote><p>Is a tweet in the past a twot or a twit?</p>

<p>Maybe a twittwot?</p>

<p>Or twittertotter? (like pitter-patter, right?)</p>

<p>Teeter-totter? (briefly reminisce childhood memories)</p>

<p>TATER TOTS! (I don&rsquo;t even like breakfast)</p>

<p>Food.</p></blockquote>

<p>Now re-read in Ellen Degeneres&rsquo;s Dory voice in Finding Nemo.</p>

<p>Welcome to my life.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apple iPhone Tracks you Everywhere]]></title>
    <link href="http://balakiriev.me/blog/2013/10/05/apple-iphone-tracks-you-everywhere/"/>
    <updated>2013-10-05T00:11:00+02:00</updated>
    <id>http://balakiriev.me/blog/2013/10/05/apple-iphone-tracks-you-everywhere</id>
    <content type="html"><![CDATA[<p><a href="http://editorial.designtaxi.com/news-track2004/1.jpg">Map</a></p>

<p>A team of researchers recently uncovered that the Apple iPhone secretly stores your location data at regular intervals in a hidden text file and then uploads that file to your computer.</p>

<!-- more -->


<p>Anyone will technical know-how could possibly gain access to this data. This poses a huge security risk and people&rsquo;s privacy could be in jeopardy.</p>

<p><a href="http://designtaxi.com/news/34575/iPhone-Found-to-Track-Users-Movement">Read the original article here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Domain URL Shorteners with bit.ly]]></title>
    <link href="http://balakiriev.me/blog/2013/10/05/custom-domain-url-shorteners-with-bit-dot-ly/"/>
    <updated>2013-10-05T00:09:00+02:00</updated>
    <id>http://balakiriev.me/blog/2013/10/05/custom-domain-url-shorteners-with-bit-dot-ly</id>
    <content type="html"><![CDATA[<p>I recently acquired <a href="http://leav.in">leav.in</a> because I wanted to make my own URL shortening service. After spending a few hours making a little Rails application that connected to a backend service and a nice little UI, I decided to actually google &ldquo;custom domain URL shortner.&rdquo; Low and behold, <a href="http://bit.ly">bit.ly</a> offers a free service, bit.ly pro that provides custom domain short URL service and then some! It was a little difficult to fiddle through (not because of configuration, but just finding stuff), so here&rsquo;s a little walk through to help you out!</p>

<!-- more -->


<ol>
<li>Buy a short domain name. I recommend <a href="http://name.com">name.com</a> just because they give great tools for managing DNS, are cheap, and their DNS updates almost instantly.</li>
<li><p>Create a bit.ly account:</p>

<p> <img src="http://media.tumblr.com/tumblr_ljjh9aPGWg1qhdc0f.png" alt="Signup for bit.ly" /></p></li>
<li><p>Add bit.ly pro to your account (it&rsquo;s free)</p></li>
<li><p>Enter your settings panel:</p>

<p> <img src="http://media.tumblr.com/tumblr_ljjhjmF8hv1qhdc0f.png" alt="Settings Panel" /></p></li>
<li><p>Click on your bit.ly pro settings:</p>

<p> <img src="http://media.tumblr.com/tumblr_ljjhlkrzCN1qhdc0f.png" alt="bit.ly pro settings" /></p></li>
<li><p>Go and modify your DNS records with your host as described in the grey box. Do this <strong>first</strong> so that the changes can populate as you do step</p></li>
<li><p>Enter your short URL domain in the box provided and click &ldquo;Add Short Domain&rdquo;.</p>

<p> <img src="http://media.tumblr.com/tumblr_ljjhtlM1zN1qhdc0f.png" alt="Add short domain" /></p></li>
<li><p>Be sure to verify that your DNS is configured correctly. Depending on your provider, you may need to wait up to 48 hours for these changes to populate:</p>

<p> <img src="http://media.tumblr.com/tumblr_ljjhwqJQ0k1qhdc0f.png" alt="DNS" /></p></li>
<li><p>Unless something terrible went wrong, you should see something similar to the following:</p>

<p> <img src="http://media.tumblr.com/tumblr_ljjhy36AsG1qhdc0f.png" alt="Final" /></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functionality In Initial Webapps]]></title>
    <link href="http://balakiriev.me/blog/2013/10/04/functionality-in-initial-webapps/"/>
    <updated>2013-10-04T00:00:00+02:00</updated>
    <id>http://balakiriev.me/blog/2013/10/04/functionality-in-initial-webapps</id>
    <content type="html"><![CDATA[<hr />

<p>layout: post
title: &ldquo;Functionality in initial webapps&rdquo;
date: 2013-10-04 23:52
comments: true
categories: webapp functionality</p>

<p>I&rsquo;m a firm believer that UI should always supersede functionality, especially in the case of new webapps. People generally lash out when I say such things, but when you&rsquo;re starting a small company or launching a new product, a fully functional website does you no good if people don&rsquo;t know how to use it. Conversely, a buggy website with helpful, encouraging error handlers will encourage users to keep coming back.</p>

<!-- more -->


<p>Think about it this way &ndash; if Facebook suddenly went down, would you come back in an hour? If Facebook never threw any errors and was &ldquo;perfect&rdquo;, yet it was totally unusable, would you still use it? Probably not!</p>

<blockquote><p>A functional UI is more important than a functional app.</p></blockquote>

<p>Developers should spend more time analyzing user-testing instead of debugging features. While I don&rsquo;t condone releasing a buggy application, I&rsquo;d much rather see a pretty application with a few bugs released over a perfect application that only developers know how to use.</p>

<p>Development is often thought of in the opposite direction &ndash; get your database structure and &ldquo;code&rdquo;; written, and then move on to making the application look pretty. I completely despise this ideology! End users don&rsquo;t care about code! They don&rsquo;t care that your database is in third normal form. They want things that look fancy! Fade in/fade out transitions, slide up/slide downs, spinners when things are loading &ndash; these are things that users want!</p>

<p>All too often developers are concerned with making their code faster, better, or prettier, yet they fail to remember the end user! Add drag/drop where you can, make things as intuitive as possible, and don&rsquo;t forget the end user! Make your 404s and 500s informative and encourage users to return.</p>
]]></content>
  </entry>
  
</feed>
